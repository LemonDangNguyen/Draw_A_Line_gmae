vi du capnhat du lieu hinh moi:


class ShapeModel {
    @SerializedName("hinhVuong")
    val hinhVuong: SquareData? = null

    @SerializedName("circle")
    val circle: CircleData? = null  // Thêm trường hình tròn mới

    class CircleData {
        @SerializedName("circle")
        val circle: String = ""
    }

    // Các hình khác (hinhVuong, line) không thay đổi
}




json

[
  {
    "line": {
      "line": "android:fillColor=\"#FFD9D9D9\"\n android:pathData=\"M285.5 0c8.01 0 14.5 6.49 14.5 14.5h0c0 8.01-6.49 14.5-14.5 14.5l-271 0c-8.01 0-14.5-6.49-14.5-14.5h0c0-8.01 6.49-14.5 14.5-14.5z\""
    },
    "hinhVuong": {
      "left": "android:fillColor=\"#FFD9D9D9\"\nandroid:pathData=\"M0 15c0-8.28 6.72-15 15-15h0c8.28 0 15 6.72 15 15v270c0 8.28-6.72 15-15 15h0c-8.28 0-15-6.72-15-15z\"",
      "bottom": "android:fillColor=\"#FFD9D9D9\"\nandroid:pathData=\"M0 285c0-8.28 6.72-15 15-15h270c8.28 0 15 6.72 15 15v0c0 8.28-6.72 15-15 15h-270c-8.28 0-15-6.72-15-15z\"",
      "right": "android:fillColor=\"#FFD9D9D9\"\nandroid:pathData=\"M270 15c0-8.28 6.72-15 15-15h0c8.28 0 15 6.72 15 15v270c0 8.28-6.72 15-15 15h0c-8.28 0-15-6.72-15-15z\"",
      "top": "android:fillColor=\"#FFD9D9D9\"\nandroid:pathData=\"M0 15c0-8.28 6.72-15 15-15h270c8.28 0 15 6.72 15 15v0c0 8.28-6.72 15-15 15h-270c-8.28 0-15-6.72-15-15z\""
    },
    "circle": {
      "circle": "android:fillColor=\"#FFD9D9D9\"\nandroid:pathData=\"M150 0a150 150 0 1 1 0 300a150 150 0 1 1 0 -300z\""
    }
  }
]



ham nay o main

private fun determineShapeType(index: Int): String {
    return when (index % 3) {  // 0 cho line, 1 cho hinhVuong, 2 cho circle
        0 -> "line"
        1 -> "hinhVuong"
        2 -> "circle"  // Hình tròn
        else -> "line"  // Mặc định
    }
}


private var currentPath: Path? = null
override fun onDraw(canvas: Canvas) {
        super.onDraw(canvas)

        bounds?.let { b ->
            canvas.translate((width - b.width()) / 2, (height - b.height()) / 2)
            currentPath?.let {
                paint.color = currentColor
                canvas.drawPath(it, paint)
            }
        }
    }

      // Kiểm tra xem điểm (x, y) có nằm trên path không
        private fun isTouchingPath(x: Float, y: Float): Boolean {
            return shapes.any { (shapePath, _) ->
                // Tạo một Path để chứa hình dạng
                val hitPath = Path()
                hitPath.addPath(shapePath) // Thêm đường vào hitPath để kiểm tra

                // Sử dụng phương thức Path.contains để kiểm tra xem điểm có nằm trên path không
                hitPath.contains(x, y) // Trả về true nếu điểm nằm trên path, false nếu không
            }
        }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////


 private fun determineShapeType(index: Int): String {
        val shape = shapeList[index]

        val shapeMap = mapOf(
            "line" to shape.line,
            "hinhVuong" to shape.hinhVuong,
            "tamGiac" to shape.tamGiac
            // Bạn có thể thêm các loại hình khác ở đây
        )

        return shapeMap.entries.firstOrNull { it.value != null }?.key ?: "unknown" // Trả về tên hình đầu tiên không null hoặc "unknown"
    }
////



